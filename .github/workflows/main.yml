name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  secret-scan:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2           
      - uses: max/secret-scan@master
      
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Build docker
      run: docker build -t flask-calculator:${{ github.sha }} .
      working-directory: ./
      
  sca:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2   

      - name: Create logs directory
        run: mkdir -p logs/

      - name: Safety
        run: |
          cd ${{ github.workspace }}
          pip install safety
          if [ ! -f ./requirements.txt ]; then
            echo "Error: requirements.txt not found"
            exit 1
          fi
          safety check -r ./requirements.txt > ./logs/result-safety.txt || exit $?

      - name: Print logs
        run: cat logs/result-safety.txt

      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: logs
          path: logs/result-safety.txt

  sast:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: |
        mkdir -p logs/      
    - uses: jpetrucciani/bandit-check@master
      with:
        path: ./app.py
        bandit_flags: -lll -o logs/output.json -f json
    - uses: actions/upload-artifact@v2
      with:
        name: logs
        path: logs/output.json
        
  dast:
    needs: [build, sca]
    runs-on: ubuntu-latest
    # permissions: write-all
    steps:
     - name: ZAP Scan
       uses: zaproxy/action-baseline@v0.6.1
       with:
         target: 'http://localhost:5000'
         cmd_options: '-a'    

  deploy:
    needs: [build, sast]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/flask-calculator:${{ github.sha }}
