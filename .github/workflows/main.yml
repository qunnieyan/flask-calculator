name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  secret-scan:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2           
      - uses: max/secret-scan@master
      
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Build docker-compose
      run: docker-compose -f ./docker-compose.yml up --build -d
      
  sast:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: |
        mkdir -p logs/      
    - uses: jpetrucciani/bandit-check@master
      with:
        path: ./app.py
        bandit_flags: -lll -o logs/output.json -f json
    - uses: actions/upload-artifact@v2
      with:
        name: logs
        path: logs/output.json
        
  dast:
    needs: [build]
    runs-on: ubuntu-latest
    # permissions: write-all
    steps:
      - name: Checkout
        uses: actions/checkout@v2
    
      - name: Build docker-compose
        run: docker-compose -f ./docker-compose.yml up --build -d

      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.6.1
        with:
          target: 'http://localhost:3000'
          cmd_options: '-a'    
         
  deploy:
    needs: [build, sast, dast]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/flask-calculator:${{ github.sha }}
          
  container-scan:
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
     - name: Run Dockle
       uses: erzz/dockle-action@v1.1.1
       with:
         image: silvermistvv/tic4302-demo
         report-format: json
         report-name: dockle-report
        
     - name: Upload Report
       uses: actions/upload-artifact@v2
       if: always()
       with:
         name: Dockle Report
         path: dockle-report.json
